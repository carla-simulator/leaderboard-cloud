{
  "Comment": "A description of my state machine",
  "StartAt": "PreEKS",
  "States": {
    "PreEKS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-west-2:342236305043:function:stagingPreEKS:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Check Eligibility",
      "InputPath": "$[0]"
    },
    "Check Eligibility": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.is_eligible",
            "BooleanEquals": true
          },
          "Next": "PostEKS"
        }
      ],
      "Default": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "PreParallel",
          "States": {
            "PreParallel": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:342236305043:function:stagingPreParallel:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check Leaderboard"
            },
            "Check Leaderboard": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.cluster.id",
                  "StringEquals": "leaderboard-10",
                  "Next": "Map L1"
                }
              ],
              "Default": "Map L2"
            },
            "Map L1": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "EKS RunJob Stack L1",
                "States": {
                  "EKS RunJob Stack L1": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::eks:runJob",
                    "Parameters": {
                      "ClusterName.$": "$.cluster.name",
                      "CertificateAuthority.$": "$.cluster.certificate_authority",
                      "Endpoint.$": "$.cluster.endpoint",
                      "Job": {
                        "apiVersion": "batch/v1",
                        "kind": "Job",
                        "metadata": {
                          "name.$": "$.submission.name"
                        },
                        "spec": {
                          "backoffLimit": 2,
                          "template": {
                            "spec": {
                              "serviceAccountName": "submission-worker",
                              "nodeSelector": {
                                "node.kubernetes.io/instance-type": "g5.12xlarge"
                              },
                              "initContainers": [
                                {
                                  "name": "private-contents",
                                  "image.$": "$.cluster.leaderboard_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "cp -r ${LEADERBOARD_ROOT}/* /tmp/leaderboard/\ncp -r ${SCENARIO_RUNNER_ROOT}/* /tmp/scenario_runner/\ncp -r ${CARLA_PYTHON_API_ROOT}/* /tmp/CARLA/\ncp -r ${GPU_UTILS_ROOT}/* /tmp/gpu_utils\n\nif [ -z $RESUME ]; then\n  echo \"Detected a normal run, creating log files\"\n  mkdir -m 0777 -p /tmp/logs/agent\n  mkdir -m 0777 -p /tmp/logs/simulator\n  mkdir -m 0777 -p /tmp/logs/uploader\n  mkdir -m 0777 -p /tmp/logs/containers-status\nelse\n  echo \"Detected a resume, download log files from S3, and removing the container status data\"\n  #Descargar solo el merge results.json y ponerlo en /tmp/logs/agent?\n  # Q hacer con los agent1/leaderboard.log ....\n  aws s3 sync s3://${S3_BUCKET}/${SUBMISSION_ID}/agent/results.json /tmp/logs/agent/results.json\n  aws s3 rm s3://${S3_BUCKET}/${SUBMISSION_ID}/containers-status --recursive\nfi\n\nbash /tmp/gpu_utils/get_gpu_uuid.sh > /tmp/gpu_utils/gpu.txt\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "SUBMISSION_ID",
                                      "value.$": "$.submission.submission_id"
                                    },
                                    {
                                      "name": "RESUME",
                                      "value.$": "$.submission.resume"
                                    },
                                    {
                                      "name": "S3_BUCKET",
                                      "value.$": "$.aws.s3_bucket"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/tmp/leaderboard",
                                      "name": "leaderboard"
                                    },
                                    {
                                      "mountPath": "/tmp/scenario_runner",
                                      "name": "scenario-runner"
                                    },
                                    {
                                      "mountPath": "/tmp/CARLA",
                                      "name": "carla-python-api"
                                    },
                                    {
                                      "mountPath": "/tmp/gpu_utils",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/tmp/logs",
                                      "name": "logs"
                                    }
                                  ],
                                  "resources": {
                                    "limits": {
                                      "nvidia.com/gpu": 1
                                    }
                                  }
                                }
                              ],
                              "containers": [
                                {
                                  "name": "simulator",
                                  "image.$": "$.cluster.simulator_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "export NVIDIA_VISIBLE_DEVICES=$(/gpu/get_gpu_device.sh)\nbash /home/carla/run_carla.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/gpu",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/home/carla/CarlaUE4/Saved",
                                      "name": "logs",
                                      "subPath": "simulator"
                                    },
                                    {
                                      "mountPath": "/tmp/status",
                                      "name": "logs",
                                      "subPath": "containers-status"
                                    }
                                  ]
                                },
                                {
                                  "name": "agent",
                                  "image.$": "$.submission.submitted_image_uri",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "export NVIDIA_VISIBLE_DEVICES=$(/gpu/get_gpu_device.sh)\nbash /workspace/leaderboard/run_leaderboard.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    },
                                    {
                                      "name": "CHALLENGE_TRACK_CODENAME",
                                      "value.$": "$.submission.track_codename"
                                    },
                                    {
                                      "name": "ROUTES_SUBSET",
                                      "value.$": "$.submission.subset"
                                    },
                                    {
                                      "name": "ROUTES",
                                      "value": "/workspace/leaderboard/data/routes_testing.xml"
                                    },
                                    {
                                      "name": "SCENARIOS",
                                      "value": "/workspace/leaderboard/data/all_towns_traffic_scenarios_private.json"
                                    },
                                    {
                                      "name": "REPETITIONS",
                                      "value": "5"
                                    },
                                    {
                                      "name": "RESUME",
                                      "value.$": "$.submission.resume"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/workspace/leaderboard",
                                      "name": "leaderboard"
                                    },
                                    {
                                      "mountPath": "/workspace/scenario_runner",
                                      "name": "scenario-runner"
                                    },
                                    {
                                      "mountPath": "/workspace/CARLA",
                                      "name": "carla-python-api"
                                    },
                                    {
                                      "mountPath": "/gpu",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/tmp/agent",
                                      "name": "logs",
                                      "subPath": "agent"
                                    },
                                    {
                                      "mountPath": "/tmp/status",
                                      "name": "logs",
                                      "subPath": "containers-status"
                                    }
                                  ]
                                },
                                {
                                  "name": "aws-uploader",
                                  "image.$": "$.cluster.uploader_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "bash /workspace/run_uploader.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    },
                                    {
                                      "name": "SUBMISSION_ID",
                                      "value.$": "$.submission.submission_id"
                                    },
                                    {
                                      "name": "S3_BUCKET",
                                      "value.$": "$.aws.s3_bucket"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/logs",
                                      "name": "logs"
                                    }
                                  ]
                                }
                              ],
                              "restartPolicy": "OnFailure",
                              "volumes": [
                                {
                                  "name": "leaderboard",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "scenario-runner",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "carla-python-api",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "gpu-utils",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "logs",
                                  "emptyDir": {}
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "Next": "EKS RemoveJob Stack L1"
                  },
                  "EKS RemoveJob Stack L1": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::eks:call",
                    "Parameters": {
                      "ClusterName.$": "$.cluster.name",
                      "CertificateAuthority.$": "$.cluster.certificate_authority",
                      "Endpoint.$": "$.cluster.endpoint",
                      "Method": "DELETE",
                      "Path.$": "States.Format('/apis/batch/v1/namespaces/default/jobs/{}', $.submission.name)",
                      "QueryParameters": {
                        "propagationPolicy": [
                          "Foreground"
                        ]
                      }
                    },
                    "End": true
                  }
                }
              },
              "End": true
            },
            "Map L2": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "EKS RunJob Stack L2",
                "States": {
                  "EKS RunJob Stack L2": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::eks:runJob.sync",
                    "Parameters": {
                      "ClusterName.$": "$.cluster.name",
                      "CertificateAuthority.$": "$.cluster.certificate_authority",
                      "Endpoint.$": "$.cluster.endpoint",
                      "Job": {
                        "apiVersion": "batch/v1",
                        "kind": "Job",
                        "metadata": {
                          "name.$": "$.submission.name"
                        },
                        "spec": {
                          "backoffLimit": 2,
                          "template": {
                            "spec": {
                              "serviceAccountName": "submission-worker",
                              "nodeSelector": {
                                "node.kubernetes.io/instance-type": "g5.12xlarge"
                              },
                              "initContainers": [
                                {
                                  "name": "private-contents",
                                  "image.$": "$.cluster.leaderboard_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "cp -r ${LEADERBOARD_ROOT}/* /tmp/leaderboard/\ncp -r ${SCENARIO_RUNNER_ROOT}/* /tmp/scenario_runner/\ncp -r ${CARLA_PYTHON_API_ROOT}/* /tmp/CARLA/\ncp -r ${GPU_UTILS_ROOT}/* /tmp/gpu_utils\n\nif [ -z $RESUME ]; then\n  echo \"Detected a normal run, creating log files\"\n  mkdir -m 0777 -p /tmp/logs/agent\n  mkdir -m 0777 -p /tmp/logs/simulator\n  mkdir -m 0777 -p /tmp/logs/uploader\n  mkdir -m 0777 -p /tmp/logs/containers-status\nelse\n  echo \"Detected a resume, download log files from S3, and removing the container status data\"\n  #Descargar solo el merge results.json y ponerlo en /tmp/logs/agent?\n  # Q hacer con los agent1/leaderboard.log ....\n  aws s3 sync s3://${S3_BUCKET}/${SUBMISSION_ID}/agent/results.json /tmp/logs/agent/results.json\n  aws s3 rm s3://${S3_BUCKET}/${SUBMISSION_ID}/containers-status --recursive\nfi\n\nbash /tmp/gpu_utils/get_gpu_uuid.sh > /tmp/gpu_utils/gpu.txt\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "SUBMISSION_ID",
                                      "value.$": "$.submission.submission_id"
                                    },
                                    {
                                      "name": "RESUME",
                                      "value.$": "$.submission.resume"
                                    },
                                    {
                                      "name": "S3_BUCKET",
                                      "value.$": "$.aws.s3_bucket"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/tmp/leaderboard",
                                      "name": "leaderboard"
                                    },
                                    {
                                      "mountPath": "/tmp/scenario_runner",
                                      "name": "scenario-runner"
                                    },
                                    {
                                      "mountPath": "/tmp/CARLA",
                                      "name": "carla-python-api"
                                    },
                                    {
                                      "mountPath": "/tmp/gpu_utils",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/tmp/logs",
                                      "name": "logs"
                                    }
                                  ],
                                  "resources": {
                                    "limits": {
                                      "nvidia.com/gpu": 1
                                    }
                                  }
                                }
                              ],
                              "containers": [
                                {
                                  "name": "simulator",
                                  "image.$": "$.cluster.simulator_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "export NVIDIA_VISIBLE_DEVICES=$(/gpu/get_gpu_device.sh)\nbash /home/carla/run_carla.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    },
                                    {
                                      "name": "DISPLAY",
                                      "value": ":0"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/tmp/.X11-unix",
                                      "name": "x11"
                                    },
                                    {
                                      "mountPath": "/gpu",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/home/carla/CarlaUE4/Saved",
                                      "name": "logs",
                                      "subPath": "simulator"
                                    },
                                    {
                                      "mountPath": "/tmp/status",
                                      "name": "logs",
                                      "subPath": "containers-status"
                                    }
                                  ]
                                },
                                {
                                  "name": "agent",
                                  "image.$": "$.submission.submitted_image_uri",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "export NVIDIA_VISIBLE_DEVICES=$(/gpu/get_gpu_device.sh)\nbash /workspace/leaderboard/run_leaderboard.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    },
                                    {
                                      "name": "CHALLENGE_TRACK_CODENAME",
                                      "value.$": "$.submission.track_codename"
                                    },
                                    {
                                      "name": "ROUTES_SUBSET",
                                      "value.$": "$.submission.subset"
                                    },
                                    {
                                      "name": "ROUTES",
                                      "value": "/workspace/leaderboard/data/routes_testing.xml"
                                    },
                                    {
                                      "name": "REPETITIONS",
                                      "value": "1"
                                    },
                                    {
                                      "name": "RESUME",
                                      "value.$": "$.submission.resume"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/workspace/leaderboard",
                                      "name": "leaderboard"
                                    },
                                    {
                                      "mountPath": "/workspace/scenario_runner",
                                      "name": "scenario-runner"
                                    },
                                    {
                                      "mountPath": "/workspace/CARLA",
                                      "name": "carla-python-api"
                                    },
                                    {
                                      "mountPath": "/gpu",
                                      "name": "gpu-utils"
                                    },
                                    {
                                      "mountPath": "/tmp/agent",
                                      "name": "logs",
                                      "subPath": "agent"
                                    },
                                    {
                                      "mountPath": "/tmp/status",
                                      "name": "logs",
                                      "subPath": "containers-status"
                                    }
                                  ]
                                },
                                {
                                  "name": "aws-uploader",
                                  "image.$": "$.cluster.uploader_image",
                                  "command": [
                                    "/bin/bash",
                                    "-c"
                                  ],
                                  "args": [
                                    "bash /workspace/run_uploader.sh\n"
                                  ],
                                  "env": [
                                    {
                                      "name": "WORKER_ID",
                                      "value.$": "$.parallelization.worker_id"
                                    },
                                    {
                                      "name": "SUBMISSION_ID",
                                      "value.$": "$.submission.submission_id"
                                    },
                                    {
                                      "name": "S3_BUCKET",
                                      "value.$": "$.aws.s3_bucket"
                                    }
                                  ],
                                  "volumeMounts": [
                                    {
                                      "mountPath": "/logs",
                                      "name": "logs"
                                    }
                                  ]
                                }
                              ],
                              "restartPolicy": "OnFailure",
                              "volumes": [
                                {
                                  "name": "leaderboard",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "scenario-runner",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "carla-python-api",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "gpu-utils",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "logs",
                                  "emptyDir": {}
                                },
                                {
                                  "name": "x11",
                                  "hostPath": {
                                    "path": "/tmp/.X11-unix"
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "ResultPath": null,
                    "Next": "EKS RemoveJob Stack L2"
                  },
                  "EKS RemoveJob Stack L2": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::eks:call",
                    "Parameters": {
                      "ClusterName.$": "$.cluster.name",
                      "CertificateAuthority.$": "$.cluster.certificate_authority",
                      "Endpoint.$": "$.cluster.endpoint",
                      "Method": "DELETE",
                      "Path.$": "States.Format('/apis/batch/v1/namespaces/default/jobs/{}', $.submission.name)",
                      "QueryParameters": {
                        "propagationPolicy": [
                          "Foreground"
                        ]
                      }
                    },
                    "End": true,
                    "ResultPath": null
                  }
                }
              },
              "End": true,
              "Label": "MapL2",
              "MaxConcurrency": 4
            }
          }
        },
        {
          "StartAt": "PreMonitor",
          "States": {
            "PreMonitor": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:342236305043:function:stagingPreMonitor:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "EKS RunJob Monitor"
            },
            "EKS RunJob Monitor": {
              "Type": "Task",
              "Resource": "arn:aws:states:::eks:runJob.sync",
              "Parameters": {
                "ClusterName.$": "$.cluster.name",
                "CertificateAuthority.$": "$.cluster.certificate_authority",
                "Endpoint.$": "$.cluster.endpoint",
                "Job": {
                  "apiVersion": "batch/v1",
                  "kind": "Job",
                  "metadata": {
                    "name.$": "$.submission.name"
                  },
                  "spec": {
                    "backoffLimit": 8,
                    "template": {
                      "spec": {
                        "serviceAccountName": "submission-worker",
                        "nodeSelector": {
                          "node.kubernetes.io/instance-type": "g5.12xlarge"
                        },
                        "initContainers": [
                          {
                            "name": "private-contents",
                            "image.$": "$.cluster.leaderboard_image",
                            "command": [
                              "/bin/bash",
                              "-c"
                            ],
                            "args": [
                              "cp -r ${LEADERBOARD_ROOT}/* /tmp/leaderboard/\ncp -r ${SCENARIO_RUNNER_ROOT}/* /tmp/scenario_runner/\n"
                            ],
                            "volumeMounts": [
                              {
                                "mountPath": "/tmp/leaderboard",
                                "name": "leaderboard"
                              },
                              {
                                "mountPath": "/tmp/scenario_runner",
                                "name": "scenario-runner"
                              }
                            ]
                          }
                        ],
                        "containers": [
                          {
                            "name": "monitor",
                            "image.$": "$.cluster.monitor_image",
                            "command": [
                              "/bin/bash",
                              "-c"
                            ],
                            "args": [
                              "bash /workspace/run_monitor.sh\n"
                            ],
                            "env": [
                              {
                                "name": "SUBMISSION_ID",
                                "value.$": "$.submission.submission_id"
                              },
                              {
                                "name": "SUBMISSION_WORKERS",
                                "value.$": "$.parallelization.workers"
                              },
                              {
                                "name": "CHALLENGE_ID",
                                "value.$": "$.submission.challenge_id"
                              },
                              {
                                "name": "TRACK_ID",
                                "value.$": "$.submission.track_id"
                              },
                              {
                                "name": "TEAM_ID",
                                "value.$": "$.submission.team_id"
                              },
                              {
                                "name": "S3_BUCKET",
                                "value.$": "$.aws.s3_bucket"
                              },
                              {
                                "name": "DYNAMODB_SUBMISSIONS_TABLE",
                                "value.$": "$.aws.dynamodb_submissions_table"
                              },
                              {
                                "name": "EVALAI_AUTH_TOKEN",
                                "value.$": "$.evalai.auth_token"
                              },
                              {
                                "name": "EVALAI_API_SERVER",
                                "value.$": "$.evalai.api_server"
                              }
                            ],
                            "volumeMounts": [
                              {
                                "mountPath": "/utils/leaderboard",
                                "name": "leaderboard"
                              },
                              {
                                "mountPath": "/utils/scenario_runner",
                                "name": "scenario-runner"
                              }
                            ]
                          }
                        ],
                        "restartPolicy": "OnFailure",
                        "volumes": [
                          {
                            "name": "leaderboard",
                            "emptyDir": {}
                          },
                          {
                            "name": "scenario-runner",
                            "emptyDir": {}
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "ResultPath": null,
              "Next": "EKS RemoveJob Monitor"
            },
            "EKS RemoveJob Monitor": {
              "Type": "Task",
              "Resource": "arn:aws:states:::eks:call",
              "Parameters": {
                "ClusterName.$": "$.cluster.name",
                "CertificateAuthority.$": "$.cluster.certificate_authority",
                "Endpoint.$": "$.cluster.endpoint",
                "Method": "DELETE",
                "Path.$": "States.Format('/apis/batch/v1/namespaces/default/jobs/{}', $.submission.name)",
                "QueryParameters": {
                  "propagationPolicy": [
                    "Foreground"
                  ]
                }
              },
              "End": true,
              "ResultPath": null
            }
          }
        }
      ],
      "Next": "PostEKS",
      "ResultPath": null
    },
    "PostEKS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-west-2:342236305043:function:stagingPostEKS:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}